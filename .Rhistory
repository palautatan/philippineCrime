### LOADING IN DATA
# This csv has already undergone Part 1 and another csv will
# be created in Part 2
population = read.csv("datasets/population/population2015.csv")
### PART 1: CHECKING HANDMADE COLUMNS
## Intended for viewing purposes
## Desired output already in population2015.csv
# To get the data as I did, by hand, fix all the provinces and regions
# to their city columns
## cleaning it up
# names(population)
# population = cbind(population[,1:4], population[,6:7])
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# detach(population)
## cleaning it up again
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region) # still need to remove excess rows
# detach(population)
## cleaning it up hopefully the last time
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# which(region=="")
# length(region)
# city[1516] # Tandag City, Region XIII - Caraga # Fixed
# detach(population)
### PART 2: CHANGING DATA TYPES
attach(population)
names(population)
updated_df = data.frame(population[,1:3])
names(updated_df)[1:3] = c("region", "province", "city")
## CHECK CITIES
all_cities = city
# Multiple city names are repeated
# There may be risk of duplicates, although duplicate city names are probable
# Las Pi√±as is not encoded correctly
## FIX DENSITY TO NUMERIC
# fix up density, since factors -- those commas!
no_commas = sapply(Population.Density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
updated_df  = cbind(updated_df, density)
## FIX POPULATION TO NUMERIC
no_commas_2 = sapply(Population, function(each_pop) {
each_pop = gsub(",", "", each_pop)
})
pop = as.numeric(no_commas_2)
updated_df = cbind(updated_df, pop)
## FIX AREA TO NUMERIC
# this might already be numeric but wtf
area = as.numeric(updated_df[,5])
updated_df = cbind(updated_df, area)
head(updated_df)
detach(population)
regionalPops = read.csv("datasets/population/regionalPops.csv")
regpop = rep(0,length(updated_df[,1]))
rm(no_commas_2)
rm(no_commas)
rm(all_cities)
which(updated_df$region==regionalPops[,2])
j=1
which(updated_df$region==regionalPops[j,2])
which(updated_df$region==regionalPops[2,2])
which(updated_df$region==regionalPops[1,2])
regionalPops[1,2]
updated_df$region[1517]
which(updated_df==regionalPops[1,2])
which(updated_df$region=="Autonomous Region in Muslim Mindanao (ARMM)")
which(updated_df$region==regionalPops[2,2])
region_indices = which(updated_df$region==regionalPops[j,2])
region_indices
regpop[region_indices] = regionalPops[j,3]
regpop
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,2])
regpop[region_indices] = regionalPops[j,3]
}
regpop2 = sapple(regpop, saveRegPop)
regpop2 = sapply(regpop, saveRegPop)
regpop2
head(regpop2)
regionalPops[j,3]
regpop2 = sapply(1: length(regpop), saveRegPop)
head(regpop2)
regpop = rep(0,length(updated_df[,1]))
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,2])
regpop[region_indices] = regionalPops[j,3]
}
yoho = sapply(1:length(regpop), saveRegPop)
head(yoho)
regpop
sapply(1:length(regionalPops), saveRegPop)
sapply(1:length(regionalPops[,1]), saveRegPop)
sapply(1:length(updated_df$region), saveRegPop)
rawr = sapply(1:length(updated_df$region), saveRegPop)
sample(rawr,10)
which(sample(rawr,10))
which(sample = sample(rawr,10))
rawr
sample(which(rawr==NA), 10)
which(rawr==NA)
sample(which(rawr==NULL), 10)
sample(which(is.na(rawr)), 10)
updated_df$region[194]
regionalPops
rawr = sapply(regpop, saveRegPop)
sample(which(is.na(rawr)), 10)
rawr
yawn = sapply(1:length(regionalPops[,2]), saveRegPop)
yawn
yawn = lapply(1:length(regionalPops[,2]), saveRegPop)
yawn
?do.call
do.call(saveRegPop, saveRegPop)
do.call(saveRegPop, regpop)
do.call(saveRegPop, updated_df$region)
do.call(saveRegPop, as.list(updated_df$region))
for (j in 1:length(regionalPops)) {
region_indices = which(updated_df$region==regionalPops[j,2])
regpop[region_indices] = regionalPops[j,3]
}
regpop
regionalPops[,1]
regionalPops[,3]
regionalPops[,2]
levels(regionalPops[,2])
for (j in 1:length(regionalPops)) {
region_indices = which(updated_df$region==levels(regionalPops[,2])[j])
regpop[region_indices] = regionalPops[j,3]
}
regpop
levels(regionalPops[,2])
levels(updated_df$region)
which(updated_df$region==levels(regionalPops[,2])[j])
j5
j=5
which(updated_df$region==levels(regionalPops[,2])[j])
for (j in 1:length(regionalPops)) {
region_indices = which(updated_df$region==levels(regionalPops[,2])[j])
regpop[region_indices] = regionalPops[j,3]
}
regpop
regionalPops
regionalPops = regionalPops[,1:2]
regionalPops
regionalPops = read.csv("datasets/population/regionalPops.csv")
regionalPops = regionalPops[,2:3]
regionalPops
j= 4
region_indices = which(updated_df$region==regionalPops[j,2])
region_indices
j = 4
region_indices = which(updated_df$region==regionalPops[j,1])
region_indices
j = 5
region_indices = which(updated_df$region==regionalPops[j,1])
region_indices
j = 5
region_indices = which(updated_df$region==regionalPops[j,1])
regpop[region_indices] = rep(regionalPops[j,2], length(region_indices))
regpop
regpop = rep(0,length(updated_df[,1]))
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,1])
regpop[region_indices] = rep(regionalPops[j,2], length(region_indices))
}
yohoo = sapply(1:length(regpop), saveRegPop)
yohoo
yohoo = sapply(1:length(regionalPops[,1]), saveRegPop)
yohoo
as.vector(yohoo)
unlist(yohoo)
regionalPops = read.csv("datasets/population/regionalPops.csv")
regionalPops = regionalPops[,2:3]
regpop = rep(0,length(updated_df[,1]))
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,1])
regpop[region_indices] = rep(regionalPops[j,2], length(region_indices))
}
regpop = sapply(1:length(regionalPops[,1]), saveRegPop)
regpop = unlist(regpop)
updated_df = cbind(updated_df, regpop)
head(updated_df)
### PART 3: ADD IN REGIONAL NUMBERS
# this was saved in regionalPop.csv
regionalPops = read.csv("datasets/population/regionalPops.csv")
regionalPops = regionalPops[,2:3]
regpop = rep(0,length(updated_df[,1]))
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,1])
regpop[region_indices] = rep(regionalPops[j,2], length(region_indices))
}
regpop = sapply(1:length(regionalPops[,1]), saveRegPop)
regpop = unlist(regpop)
updated_df = cbind(updated_df, regpop)
head(updated_df)
updated_df$region
cbind(regionalPops[,1], regpop)
regionalPops = read.csv("datasets/population/regionalPops.csv")
### LOADING IN DATA
# This csv has already undergone Part 1 and another csv will
# be created in Part 2
population = read.csv("datasets/population/population2015.csv")
### PART 1: CHECKING HANDMADE COLUMNS
## Intended for viewing purposes
## Desired output already in population2015.csv
# To get the data as I did, by hand, fix all the provinces and regions
# to their city columns
## cleaning it up
# names(population)
# population = cbind(population[,1:4], population[,6:7])
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# detach(population)
## cleaning it up again
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region) # still need to remove excess rows
# detach(population)
## cleaning it up hopefully the last time
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# which(region=="")
# length(region)
# city[1516] # Tandag City, Region XIII - Caraga # Fixed
# detach(population)
### PART 2: CHANGING DATA TYPES
attach(population)
names(population)
updated_df = data.frame(population[,1:3])
names(updated_df)[1:3] = c("region", "province", "city")
## FIX DENSITY TO NUMERIC
# fix up density, since factors -- those commas!
no_commas = sapply(Population.Density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
updated_df  = cbind(updated_df, density)
rm(no_commas)
## FIX POPULATION TO NUMERIC
no_commas_2 = sapply(Population, function(each_pop) {
each_pop = gsub(",", "", each_pop)
})
pop = as.numeric(no_commas_2)
updated_df = cbind(updated_df, pop)
rm(no_commas_2)
## FIX AREA TO NUMERIC
# this might already be numeric but wtf
area = as.numeric(updated_df[,5])
updated_df = cbind(updated_df, area)
head(updated_df)
detach(population)
regionalPops = read.csv("datasets/population/regionalPops.csv")
regionalPops = regionalPops[,2:3]
regpop = rep(0,length(updated_df[,1]))
regpop
j=1
which(updated_df$region==regionalPops[j,1])
updated_df$region[1517]
regionalPops[1,1]
regionalPops[1,1]
regionalPops
sort(regpop, levels(updated_df$region))
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,1])
regpop[region_indices] = rep(regionalPops[j,2], length(region_indices))
}
regpop = sapply(1:length(regionalPops[,1]), saveRegPop)
regpop = unlist(regpop)
regpop
regpop = sapply(1:length(regionalPops[,1]), saveRegPop)
regpop
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,1])
region_pops = rep(regionalPops[j,2], length(region_indices))
}
regpop = sapply(1:length(regionalPops[,1]), saveRegPop)
regpop
regpop = lapply(1:length(regionalPops[,1]), saveRegPop)
regpop
order(regionalPops, levels(updated_df$region))
levels(updated_df$region)
order(regionalPops[,1], levels(updated_df$region))
levels(updated_df$region)
updated_df$region <- factor(updated_df$region,levels=unique(updated_df$region))
updated_df$region
regionalPops = read.csv("datasets/population/regionalPops.csv")
regionalPops = regionalPops[,2:3]
regpop = rep(0,length(updated_df[,1]))
updated_df$region = factor(updated_df$region,levels=unique(updated_df$region))
order(regionalPops[,1], levels(updated_df$region))
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,1])
create_vector = rep(regionalPops[j,2], length(region_indices))
}
regpop = lapply(1:length(regionalPops[,1]), saveRegPop)
regpop = unlist(regpop)
regpop
regionalPops[,1] = factor(regionalPops[,1], levels=unique(updated_df$region))
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,1])
create_vector = rep(regionalPops[j,2], length(region_indices))
}
regpop = lapply(1:length(regionalPops[,1]), saveRegPop)
regpop = unlist(regpop)
regpop
regpop = rep(0,length(updated_df[,1]))
regionalPops[,1] = factor(regionalPops[,1], levels=unique(updated_df$region))
order(regionalPops[,1], levels(updated_df$region))
saveRegPop = function(j) {
region_indices = which(updated_df$region==regionalPops[j,1])
create_vector = rep(regionalPops[j,2], length(region_indices))
}
regpop = lapply(1:length(regionalPops[,1]), saveRegPop)
regpop
### LOADING IN DATA
# This csv has already undergone Part 1 and another csv will
# be created in Part 2
population = read.csv("datasets/population/population2015.csv")
### PART 1: CHECKING HANDMADE COLUMNS
## Intended for viewing purposes
## Desired output already in population2015.csv
# To get the data as I did, by hand, fix all the provinces and regions
# to their city columns
## cleaning it up
# names(population)
# population = cbind(population[,1:4], population[,6:7])
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# detach(population)
## cleaning it up again
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region) # still need to remove excess rows
# detach(population)
## cleaning it up hopefully the last time
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# which(region=="")
# length(region)
# city[1516] # Tandag City, Region XIII - Caraga # Fixed
# detach(population)
### PART 2: CHANGING DATA TYPES
attach(population)
names(population)
updated_df = data.frame(population[,1:3])
names(updated_df)[1:3] = c("region", "province", "city")
## FIX DENSITY TO NUMERIC
# fix up density, since factors -- those commas!
no_commas = sapply(Population.Density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
updated_df  = cbind(updated_df, density)
rm(no_commas)
## FIX POPULATION TO NUMERIC
no_commas_2 = sapply(Population, function(each_pop) {
each_pop = gsub(",", "", each_pop)
})
pop = as.numeric(no_commas_2)
updated_df = cbind(updated_df, pop)
rm(no_commas_2)
## FIX AREA TO NUMERIC
# this might already be numeric but wtf
area = as.numeric(updated_df[,5])
updated_df = cbind(updated_df, area)
head(updated_df)
detach(population)
j=2
region_indices = which(updated_df$region==regionalPops[j,1])
region_indices
updated_df$region[region_indices]
updated_df$region[region_indices]
regionalPops[,1]
?factor
unique(updated_df$region)
regionalPops[,1] = factor(levels = unique(updated_df$region))
regionalPops[,1]
regionalPops[,1] = factor(regionalPops[,1], levels = unique(updated_df$region))
regionalPops[,1]
saveRegPop = function(j) {
region_indices = which(updated_df$region==levels(regionalPops[,1]))
create_vector = rep(regionalPops[j,2], length(region_indices))
}
updated_df$region[region_indices]
regpop = lapply(1:length(regionalPops[,1]), saveRegPop)
regpop = unlist(regpop)
warnings()
saveRegPop = function(j) {
region_indices = which(updated_df$region==levels(regionalPops[,1])[j])
create_vector = rep(regionalPops[j,2], length(region_indices))
}
updated_df$region[region_indices]
regpop = lapply(1:length(regionalPops[,1]), saveRegPop)
regpop = unlist(regpop)
regpop
updated_df = cbind(updated_df, regpop)
regionalPops = read.csv("datasets/population/regionalPops.csv")
regionalPops = regionalPops[,2:3]
regionalPops[,1] = factor(regionalPops[,1], levels = unique(updated_df$region))
saveRegPop = function(j) {
region_indices = which(updated_df$region==levels(regionalPops[,1])[j])
create_vector = rep(regionalPops[j,2], length(region_indices))
}
updated_df$region[region_indices]
regpop = rep(0,length(updated_df[,1]))
regpop = lapply(1:length(regionalPops[,1]), saveRegPop)
regpop = unlist(regpop)
updated_df = cbind(updated_df, regpop)
head(updated_df)
write.csv(updated_df, "cleanPop.csv")
### LOADING IN DATA
# This csv has already undergone Part 1 and another csv will
# be created in Part 2
population = read.csv("datasets/population/population2015.csv")
### PART 1: CHECKING HANDMADE COLUMNS
## Intended for viewing purposes
## Desired output already in population2015.csv
# To get the data as I did, by hand, fix all the provinces and regions
# to their city columns
## cleaning it up
# names(population)
# population = cbind(population[,1:4], population[,6:7])
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# detach(population)
## cleaning it up again
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region) # still need to remove excess rows
# detach(population)
## cleaning it up hopefully the last time
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# which(region=="")
# length(region)
# city[1516] # Tandag City, Region XIII - Caraga # Fixed
# detach(population)
### PART 2: CHANGING DATA TYPES
attach(population)
names(population)
updated_df = data.frame(population[,1:3])
names(updated_df)[1:3] = c("region", "province", "city")
## FIX DENSITY TO NUMERIC
# fix up density, since factors -- those commas!
no_commas = sapply(Population.Density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
updated_df  = cbind(updated_df, density)
rm(no_commas)
## FIX POPULATION TO NUMERIC
no_commas_2 = sapply(Population, function(each_pop) {
each_pop = gsub(",", "", each_pop)
})
pop = as.numeric(no_commas_2)
updated_df = cbind(updated_df, pop)
rm(no_commas_2)
## FIX AREA TO NUMERIC
# this might already be numeric but wtf
area = as.numeric(updated_df[,5])
updated_df = cbind(updated_df, area)
head(updated_df)
detach(population)
### PART 3: ADD IN REGIONAL NUMBERS
# this was saved in regionalPop.csv
regionalPops = read.csv("datasets/population/regionalPops.csv")
regionalPops = regionalPops[,2:3]
regionalPops[,1] = factor(regionalPops[,1], levels = unique(updated_df$region))
# function to save vectors of the right lengths in order
saveRegPop = function(j) {
region_indices = which(updated_df$region==levels(regionalPops[,1])[j])
create_vector = rep(regionalPops[j,2], length(region_indices))
}
updated_df$region[region_indices]
regpop = rep(0,length(updated_df[,1]))
regpop = lapply(1:length(regionalPops[,1]), saveRegPop)
regpop = unlist(regpop)
updated_df = cbind(updated_df, regpop)
### PART 4: SAVING CSV
write.csv(updated_df, "cleanPop.csv")
