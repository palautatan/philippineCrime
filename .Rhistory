crimes
crimes[which(crimes[,3]==max(crimes[,3])),2]
names(crimes)
# Most murders
crimes[which(crimes[,3]==max(crimes[,3])),2]
# Most homicides
crimes[which(crimes[,4]==max(crimes[,4])),2]
# Most roberry
crimes[which(crimes[,5]==max(crimes[,5])),2]
# Most theft
crimes[which(crimes[,6]==max(crimes[,6])),2]
# Most carnapping
crimes[which(crimes[,7]==max(crimes[,7])),2]
# Most physical injuries
crimes[which(crimes[,8]==max(crimes[,8])),2]
# Most crime in general
crimes[which(crimes[,9]==max(crimes[,9])),2]
rape = read.csv("datasets/top_15_highest number_of_rape_cases nationwide.csv")
rape[which(rape[,3]==max(rape[,3])),2]
cities = crimes[,2]
cities
cities = unlist(crimes[,2])
cities
read.csv("datasets/population2015.csv")
population = read.csv("datasets/population2015.csv")
head(population)
names(population)
population = cbind(population[,1:4], population[,6:7])
names(population)
names(population)[5] = "Area"
population
names(population)
names(population) = to.lower(names(population))
names(population) = to.Lower(names(population))
?to.upper
?to.Upper
?toUpper
??upper
names(population) = tolower(names(population))
names(population)
names(population)[5:6] = c("Area","Density")
names(population) = tolower(names(population))
names(population)
attach(population)
head(region)
levels(region)
length(population)
length(population[1,])
length(population[,1])
population = read.csv("datasets/population2015.csv")
names(population)
names(population)[5:6] = c("Area","Density")
names(population) = tolower(names(population))
attach(population)
levels(region)
detach(population)
detach(population)
population = read.csv("datasets/population2015.csv")
names(population)
names(population)[5:6] = c("Area","Density")
names(population) = tolower(names(population))
attach(population)
levels(region)
which(region=="")
length(region)
region[1516]
city[1516]
names(population)
names(population)[5:6] = c("Area","Density")
names(population) = tolower(names(population))
attach(population)
levels(region)
which(region=="")
length(region)
city[1516] # Tandag City, Region XIII - Caraga
population = read.csv("datasets/population2015.csv")
names(population)
names(population)[5:6] = c("Area","Density")
names(population) = tolower(names(population))
attach(population)
levels(region)
which(region=="")
length(region)
city[1516] # Tandag City, Region XIII - Caraga
levels(region)
regions = levels(region)
cities = cities
cities
names(population)
all_cities = city
all_cities = city
all_cities
all_cities = levels(city)
all_cities
all_cities = city
all_cities
max(density)
density
density[1]
gsub(",", "", density[1])
no_commas = sapply(density, function(each_density) {
each_density = gsub(",", "", each_density)
})
no_commas
as.numeric(no_commas)
density = as.numeric(no_commas)
density
population
# checking out population data
# loading in data
population = read.csv("datasets/population2015.csv")
# # cleaning it up
# names(population)
# population = cbind(population[,1:4], population[,6:7])
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
#
# attach(population)
#
# levels(region)
# # cleaning it up again
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region) # still need to remove excess rows
# cleaning it up hopefully the last time
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# which(region=="")
# length(region)
# city[1516] # Tandag City, Region XIII - Caraga # Fixed
# let's find something cool, yeah?
regions = levels(region)
all_cities = city # Multiple city names are repeated, obvi
# fix up density, since factors -- those commas!
no_commas = sapply(density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
density
head(population)
population = read.csv("datasets/population2015.csv")
attach(population)
regions = levels(region)
all_cities = city # Multiple city names are repeated, obvi
# fix up density, since factors -- those commas!
no_commas = sapply(density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
density
population
max(density)
which(density = max(density))
which(density == max(density))
population[which(density == max(density)),]
sort(population, density)
sort(density)
sort(density)[1:2]
sort(density)[1:5]
population[sort(density)[1:5],]
population[sort(density)[1:6],]
population[sort(Population.Density)[1:6],]
population[sort(density)[1:6],]
density
# checking out population data
# loading in data
population = read.csv("datasets/population2015.csv")
# # cleaning it up
# names(population)
# population = cbind(population[,1:4], population[,6:7])
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
#
# attach(population)
#
# levels(region)
# # cleaning it up again
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region) # still need to remove excess rows
# cleaning it up hopefully the last time
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# which(region=="")
# length(region)
# city[1516] # Tandag City, Region XIII - Caraga # Fixed
attach(population)
# let's find something cool, yeah?
regions = levels(region)
all_cities = city # Multiple city names are repeated, obvi
names(population)
names(population)
regions = levels(region)
all_cities = city # Multiple city names are repeated, obvi
all_cities
no_commas = sapply(Population.Density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
population = cbind(population, density)
names(population)
attach(population)
population[sort(density)[1:6],]
population[sort(Population)[1:6],]
regions = levels(region)
regional_pop = sapply(regions, sum(Population))
no_commas_2 = sapply(Population, function(each_pop) {
each_pop = gsub(",", "", each_pop)
})
pop = as.numeric(no_commas_2)
pop
regional_pops = c()
regional_pops = c()
for (i in 1:length(Region)) {
for (j in 1:length(regions)) {
if (Region == regions[j]) {
regional_pops[j] = regional_pops[j] + pop[i]
}
}
}
warnings()
Region
regions
regional_pops = c()
for (i in 1:length(Region)) {
for (j in 1:length(regions)) {
if (Region[i] == regions[j]) {
regional_pops[j] = regional_pops[j] + pop[i]
}
}
}
regional_pops
regions
Region
i=1
j=1
Region[i] == regions[j]
Region[i]
regions[j]
regions
j=5
Region[i] == regions[j]
Region[i]
regions[j]
j=1
j=3
regions[j]
if (Region[i] == regions[j])
print("hi")
regional_pops[j] = regional_pops[j] + pop[i]
regional_pops[j]
regional_pops = rep(0, 1:length(regions))
regional_pops = rep(0, length(regions))
regional_pops
for (i in 1:length(Region)) {
for (j in 1:length(regions)) {
if (Region[i] == regions[j]) {
regional_pops[j] = regional_pops[j] + pop[i]
}
}
}
regional_pops
cbind(regions, regional_pops)
as.list(regions, regional_pops)
cbind(regions, regional_pops)
data.frame(regions, regional_pops)
regional_population = data.frame(regions, regional_pops)
regional_sapplypops = sapply(1:length(Region), function(i) {
sapply(regions, function(j) {
if (Region[i]==regions[j]) {
regional_sapplypops[j] = regional_sapplypops[j] + pop[i]
}
})
})
regional_sapplypops = sapply(1:length(Region), function(i) {
sapply(regions, function(j) {
if (Region==regions) {
regional_sapplypops = regional_sapplypops + pop
}
})
})
warnings()
regional_sapplypops = sapply(1:length(Region), function(i) {
sapply(regions, function(j) {
if (Region[i]==regions[j]) {
regional_sapplypops = regional_sapplypops + pop
}
})
})
regional_vpops = rep(0, length(regions))
Region
df_region = as.vector(Region)
df_region
j=1
which(df_region==region[j])
sapply(1:length(region), mf_shit)
df_region = as.vector(Region)
mf_shit = function(j) {
region_indices = which(df_region==region[j])
region_pop = sum(pop[region_indices])
}
sapply(1:length(region), mf_shit)
regional_pops = sapply(1:length(region), mf_shit)
pops_table = data.frame(regions, regional_pops)
regional_pops2 = unique(regional_pops)
regional_pops2
regional_pops
# How many people per region
regions = levels(region)
no_commas_2 = sapply(Population, function(each_pop) {
each_pop = gsub(",", "", each_pop)
})
pop = as.numeric(no_commas_2)
regional_pops = rep(0, length(regions))
for (i in 1:length(Region)) {
for (j in 1:length(regions)) {
if (Region[i] == regions[j]) {
regional_pops[j] = regional_pops[j] + pop[i]
}
}
}
regional_population = data.frame(regions, regional_pops)
# I wanna remove the for loop
df_region = as.vector(Region)
mf_shit = function(j) {
region_indices = which(df_region==region[j])
region_pop = sum(pop[region_indices])
}
regional_pops2 = sapply(1:length(region), mf_shit)
regional_pops2b = unique(regional_pops)
pops_table = data.frame(regions, regional_pops)
pops_table
regional_population
pops_table = data.frame(regions, regional_pops2)
pops_table = data.frame(regions, regional_pops2b)
pops_table
regional_population
# checking out population data
## LOADING IN DATA
population = read.csv("datasets/population2015.csv")
# # cleaning it up
# names(population)
# population = cbind(population[,1:4], population[,6:7])
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
#
# attach(population)
#
# levels(region)
# # cleaning it up again
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region) # still need to remove excess rows
# cleaning it up hopefully the last time
# names(population)
# names(population)[5:6] = c("Area","Density")
# names(population) = tolower(names(population))
# attach(population)
# levels(region)
# which(region=="")
# length(region)
# city[1516] # Tandag City, Region XIII - Caraga # Fixed
attach(population)
names(population)
## START THE DATA CLEANING
# let's find something cool, yeah?
all_cities = city # Multiple city names are repeated, obvi
## FIX DENSITY TO NUMERIC
# fix up density, since factors -- those commas!
no_commas = sapply(Population.Density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
population = cbind(population, density)
names(population)
population[which(density == max(density)),] # Manila
## FIX POPULATION TO NUMERIC
no_commas_2 = sapply(Population, function(each_pop) {
each_pop = gsub(",", "", each_pop)
})
pop = as.numeric(no_commas_2)
## CITY DENSITY
# Most dense
population[sort(density)[1:6],]
# Manila, City of Las Piñas, Makati -- why are there two Makati's --, Makati, Mandaluyong City, Marikina
## CITY POPULATION
# Most populated
population[sort(Population)[1:6],]
# Manila, Quezon City, Caloocan, Pasay, Las Piñas, Makati
## REGIONAL POPULATION
# How many people per region
regions = levels(region)
regional_pops = rep(0, length(regions))
for (i in 1:length(Region)) {
for (j in 1:length(regions)) {
if (Region[i] == regions[j]) {
regional_pops[j] = regional_pops[j] + pop[i]
}
}
}
regional_population = data.frame(regions, regional_pops)
## REGIONAL POPULATION WITHOUT FOR LOOP
# I wanna remove the for loop
# Recognize this vectorization only works because they're in order
df_region = as.vector(Region)
mf_shit = function(j) {
region_indices = which(df_region==region[j])
region_pop = sum(pop[region_indices])
}
regional_pops2 = sapply(1:length(region), mf_shit)
regional_pops2b = unique(regional_pops)
pops_table = data.frame(regions, regional_pops2b)
pops_table
regional_population
level3 = readRDS("datasets/PHL_adm3.rds")
names(level3)
head(level3$NAME_0)
head(level3$NAME_1)
head(level3$NAME_2)
head(level3$NAME_3)
level3$NAME_1
sample(level3$NAME_1, 10)
head(level2$NAME_1)
sample(level2$NAME_1, 10)
level2 = readRDS("datasets/PHL_adm2.rds")
head(level2$NAME_1)
sample(level2$NAME_1, 10)
sample(level2$NAME_2, 10)
sample(level2$NAME_2, 10)
sample(level2$NAME_2, 10)
head(level1$NAME_1)
level1 = readRDS("PHL_adm1.rds")
plot(level1, main="Level 1", col="lightgrey", border="darkgrey", xlim=c(115,130), ylim=c(5,20))
names(level1)
head(level1$NAME_0) # Nation: Philippines
level1 = readRDS("PHL_adm1.rds")
level1 = readRDS("datasets/PHL_adm1.rds")
plot(level1, main="Level 1", col="lightgrey", border="darkgrey", xlim=c(115,130), ylim=c(5,20))
names(level1)
head(level1$NAME_1)
sample(level3$NAME_1, 10)
sample(level3$NAME_2, 10)
head(level3$NAME_2)
sample(level3$NAME_2, 10)
sample(level3$NAME_2, 10)
head(level3$NAME_3)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
sample(level3$NAME_3, 10)
population = read.csv("datasets/population/population2015.csv")
attach(population)
population = read.csv("datasets/population/population2015.csv")
attach(population)
names(population)
all_cities = city # Multiple city names are repeated, obvi
all_cities
no_commas = sapply(Population.Density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
population = cbind(population, density)
names(population)
population
head(population)
updated_df = data.frame()
names(population)
updated_df = data.frame(population[,1:3])
updated_df
head(updated_df)
no_commas = sapply(Population.Density, function(each_density) {
each_density = gsub(",", "", each_density)
})
density = as.numeric(no_commas)
density
updated_df  = cbind(updated_df, density)
head(updated_df)
updated_df = data.frame(population[,1:3])
names(updated_df)[1:3] = c("region", "province", "city")
updated_df
head(updated_df)
updated_df  = cbind(updated_df, density)
head(updated_df)
no_commas_2 = sapply(Population, function(each_pop) {
each_pop = gsub(",", "", each_pop)
})
pop = as.numeric(no_commas_2)
head(population)
head(updated_df)
head(no_commas_2)
